#include "aishack.hpp"

#include <opencv2/opencv.hpp>
#include <random>
#include <stdio.h>


float get_gaussian_random(float mean, float std)
{
	std::random_device rd;
	std::mt19937 e2(rd());
	std::normal_distribution<float> gen(mean, std);

	return gen(e2);
}


void draw_1d_data(cv::Mat img, float* data, int count)
{
	for(int i=0;i<count;i++)
	{
		float pt = data[i];
		cv::line(img, cv::Point(pt, 10), cv::Point(pt, 20), cv::Scalar(0));
	}
}


void draw_1d_gaussian(cv::Mat & img, float mean, float stddev, cv::Scalar color=cv::Scalar(0, 0, 0))
{
	float * prob = new float[img.cols];
	float frac = 1 / (stddev * std::sqrt(2*M_PI));

	float min_prob = FLT_MAX;
	float max_prob = FLT_MIN;

	for(int x=0; x<img.cols; x++)
	{
		prob[x] = frac * std::exp( -0.5 * (x-mean)*(x-mean) / (stddev*stddev));

		if(prob[x] > max_prob)
			max_prob = prob[x];

		if(prob[x] < min_prob)
			min_prob = prob[x];
	}

	float prev = 0;
	for(int x=0; x<img.cols; x++)
	{
		float p = 30 + 100*(1-(prob[x]/(max_prob-min_prob)));

		cv::line(img, cv::Point(x-1, prev), cv::Point(x, p), color);
		prev = p;
	}

	cv::line(img, cv::Point(mean, 30), cv::Point(mean, 130), cv::Scalar(0));
	cv::line(img, cv::Point(mean-stddev, 30), cv::Point(mean-stddev, 130), cv::Scalar(128));
	cv::line(img, cv::Point(mean+stddev, 30), cv::Point(mean+stddev, 130), cv::Scalar(128));
}


/**
 * We generate a random number as noise and add it to the pure gaussian generated by the function
 * @param mean
 * @param std
 * @param count
 * @return 
 */
float * generate_1d_data(float mean, float std, int count)
{
	float * data = new float[count];

	for(int i=0; i<count; i++)
	{
		float noise = 2 * std * (float)rand()/RAND_MAX;
		noise -= 10;
		data[i] = get_gaussian_random(mean, std) + noise;
	}

	return data;
}


void run_gaussian_1d()
{
	const int count = 1000;
	const float mean = (rand()/(float)RAND_MAX - 0.5f) * 320 + 320;
	const float std  = (rand()/(float)RAND_MAX) * 100;

	float * data = generate_1d_data(mean, std, count);

	float learned_mean = 0, learned_variance = 0;
	for(int i=0; i<count; i++)
	{
		learned_mean += data[i];
		learned_variance += data[i] * data[i];
	}

	learned_mean /= count;
	learned_variance = learned_variance/count - learned_mean*learned_mean;
	float learned_std = std::sqrt(learned_variance);

	const int graph_width = 640;
	const int graph_height = 140;
	cv::Mat graph(graph_height, graph_width, CV_8UC3, cv::Scalar(255, 255, 255));
	draw_1d_data(graph, data, count);
	draw_1d_gaussian(graph, learned_mean, learned_std);

	printf("Original mean = %0.2f, std = %0.2f\n", mean, std);
	printf("Learned mean = %0.2f, std = %0.2f\n", learned_mean, learned_std);
	cv::imwrite("/home/xnext/1d-single-gaussian.png", graph);

	delete[] data;
}
